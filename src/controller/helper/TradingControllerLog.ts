import type { Position } from "@quadcode-tech/client-sdk-js";
import type { TradingState } from "../../models/TradingState";
import { getTradeWorkerEnvConfig } from "../../models/environment/TradeWorkerEnvConfig";
import { createWorkerLogger } from "../../utils/AppLogger";
import { calculateTradingStats } from "../../utils/TradingStatsUtils";
import { getGlobalEnvConfig } from "../../models/environment/GlobalEnvConfig";

export class TradingControllerLog {
  private readonly tradingConfig = getTradeWorkerEnvConfig();
  private readonly logger = createWorkerLogger({
    logFolderPath: process.env.LOG_FOLDER_PATH!,
    workerId: String(this.tradingConfig.INSTRUMENT),
  });

  constructor(private readonly tradingState: TradingState) {}

  logTradingPositionClosed(position: Position): void {
    const pnl = position.pnl || 0;
    const currentTradeNumber = this.tradingState.getCurrentTradeNumber();

    const logMessage = `
üèÅ ==================== Trade #${currentTradeNumber} Position Closed ====================

üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:
   ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${position.externalId}
   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ${position.active?.name}
   ‚Ä¢ Direction: ${position.direction?.toUpperCase()}
   ‚Ä¢ Status: ${position.status}

üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:
   ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠: ${position.invest}
   ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î: ${position.openQuote}
   ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏ã‡∏∑‡πâ‡∏≠: ${position.closeQuote}

üìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
   ‚Ä¢ PNL: ${pnl}
   ‚Ä¢ Net PNL: ${position.pnlNet}
   ‚Ä¢ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠: ${pnl > 0 ? "‚úÖ WIN" : "‚ùå LOSS"}
   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${pnl > 0 ? "+" : ""}${pnl}

üîÑ Trading Progress:
   ‚Ä¢ Current Cycle: ${currentTradeNumber}
   ‚Ä¢ Max Cycles: ${this.tradingConfig.MAX_TRADE_CYCLES}
=====================================================================\n`;

    this.logger.info(logMessage);
  }

  printTradingSummary(tradingState: TradingState) {
    const stats = calculateTradingStats(tradingState.getResultOfPositions());
    const positions = tradingState.getResultOfPositions();

    const logMessage = `
üìä ==================== Trading Summary ====================

üìù Individual Round Results:
${positions
  .map((position, index) => {
    const pnl = position.pnl || 0;
    const result = pnl > 0 ? "‚úÖ WIN" : "‚ùå LOSS";
    return `
   Round ${index + 1}:
      ‚Ä¢ Result: ${result}
      ‚Ä¢ PnL: ${pnl.toFixed(2)}
      ‚Ä¢ Direction: ${position.direction}
      ‚Ä¢ Invest: ${position.invest}
      ‚Ä¢ Open Quote: ${position.openQuote}
      ‚Ä¢ Close Quote: ${position.closeQuote}`;
  })
  .join("\n")}

üìà Overall Trading Performance:
   ‚Ä¢ Total Trades: ${stats.totalTrades}
   ‚Ä¢ Winning Trades: ${stats.totalWins}
   ‚Ä¢ Losing Trades: ${stats.totalLosses}
   ‚Ä¢ Win Rate: ${stats.winRate.toFixed(2)}%
   ‚Ä¢ Total PnL: ${stats.totalPnL.toFixed(2)}
   ‚Ä¢ Maximum trade cycles: ${this.tradingConfig.MAX_TRADE_CYCLES}

üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${new Date().toLocaleString()}
=====================================================================\n`;

    this.logger.info(logMessage);
  }
}
