import {
  ClientSdk,
  BinaryOptionsDirection,
  Balance,
  Position,
} from "@quadcode-tech/client-sdk-js";
import { TradingConfig } from "../models/TradingConfig";
import { PositionMonitor } from "./PositionMonitor";
import { MaxCyclesReachedError } from "../errors/MaxCyclesReachedError";
import { TradingState } from "../models/TradingState";

export class OrderManager {
  private lastOrderExpiry: Date | null = null;
  private isPlacingOrder = false;
  private readonly positionMonitor: PositionMonitor;

  constructor(
    private readonly clientSdk: ClientSdk,
    private readonly balance: Balance,
    private readonly config: TradingConfig,
    private readonly tradingState: TradingState
  ) {
    this.positionMonitor = new PositionMonitor(clientSdk, config, tradingState);
  }

  async handleSignal(direction: BinaryOptionsDirection): Promise<void> {
    if (this.isPlacingOrder) {
      // console.log("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ order ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô...");
      return;
    }

    if (this.lastOrderExpiry && new Date() < this.lastOrderExpiry) {
      // console.log("‚è≥ ‡∏¢‡∏±‡∏á‡∏°‡∏µ order ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
      return;
    }

    this.isPlacingOrder = true;
    this.tradingState.setHasActiveOrder(true);
    try {
      await this.placeOrder(direction);
    } finally {
      this.isPlacingOrder = false;
    }
  }

  private async placeOrder(direction: BinaryOptionsDirection): Promise<void> {
    console.log("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á order...");

    const binaryOptions = await this.clientSdk.binaryOptions();
    const amount = this.config.buyAmount;

    console.log(
      `üí∞ ‡∏ß‡∏≤‡∏á order: ${
        direction === BinaryOptionsDirection.Call ? "üìà Call" : "üìâ Put"
      } | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount}`
    );

    const instrument = await this.findInstrument(binaryOptions);
    if (!instrument) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö instrument ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°");
    }

    console.log(
      "\n\n========================================================="
    );
    console.log(
      `üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()}...`
    );
    const callOption = await binaryOptions.buy(
      instrument,
      direction,
      amount,
      this.balance
    );

    this.lastOrderExpiry = new Date(callOption.expiredAt);
    console.log(
      `‚úÖ Order ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${
        direction === BinaryOptionsDirection.Call ? "üìà Call" : "üìâ Put"
      } | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount} | ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${this.lastOrderExpiry.toLocaleString()}`
    );

    try {
      await this.positionMonitor.monitorPosition(
        callOption.id,
        (position) => {
          this.handlePositionClosed(position);
          this.lastOrderExpiry = null;
          this.tradingState.setHasActiveOrder(false);
          if (
            this.tradingState.getCurrentCycle() >= this.config.maxTradeCycles
          ) {
            throw new MaxCyclesReachedError(this.config.maxTradeCycles);
          }
          this.tradingState.incrementCurrentCycle();
        },
        this.lastOrderExpiry
      );
    } catch (error) {
      if (error instanceof MaxCyclesReachedError) {
        throw error; // Re-throw MaxCyclesReachedError to be handled by TradingService
      }
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° position:", error);
      throw error;
    }
  }

  private async findInstrument(binaryOptions: any): Promise<any> {
    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ active instrument...");
    const actives = binaryOptions
      .getActives()
      .filter((active: any) => active.canBeBoughtAt(new Date()));

    const active = actives.find(
      (active: any) => active.id === this.config.instrument.id
    );
    if (!active) {
      throw new Error(
        `‡πÑ‡∏°‡πà‡∏û‡∏ö active instrument ID: ${this.config.instrument.id}`
      );
    }
    console.log(`‚úÖ ‡∏û‡∏ö active instrument: ${active.ticker}`);

    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ available instruments...");
    const instruments = await active.instruments();
    if (!instruments) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö instruments");
    }

    const availableInstruments = instruments.getAvailableForBuyAt(new Date());
    if (!availableInstruments || availableInstruments.length === 0) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö available instruments");
    }
    console.log(
      `‚úÖ ‡∏û‡∏ö available instruments: ${availableInstruments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    );

    return availableInstruments[0];
  }

  private handlePositionClosed(position: Position): void {
    const pnl = position.pnl || 0;
    this.tradingState.addResultOfPosition(position);
    console.log(
      `\nüèÅ ================== Position Closed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ================== üèÅ`
    );
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}`);

    // Position Summary
    console.log("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:");
    console.log(`   ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:        ${position.externalId}`);
    console.log(`   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå:         ${position.active?.name}`);
    console.log(`   ‚Ä¢ Direction:        ${position.direction?.toUpperCase()}`);
    console.log(`   ‚Ä¢ Status:            ${position.status}`);

    // Investment Details
    console.log("\nüí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:");
    console.log(`   ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠:      ${position.invest}`);
    console.log(`   ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î:          ${position.openQuote}`);
    console.log(`   ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏ã‡∏∑‡πâ‡∏≠:        ${position.closeQuote}`);

    // Result
    console.log("\nüìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:");
    console.log(`   ‚Ä¢ PNL:              ${pnl}`);
    console.log(`   ‚Ä¢ Net PNL:          ${position.pnlNet}`);
    console.log(`   ‚Ä¢ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:          ${pnl > 0 ? "‚úÖ WIN" : "‚ùå LOSS"}`);
    console.log(`   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô:       ${pnl > 0 ? "+" : ""}${pnl}`);

    // Trading Progress
    console.log("\nüîÑ Trading Progress:");
    console.log(
      `   ‚Ä¢ Current Cycle:    ${this.tradingState.getCurrentCycle()}`
    );
    console.log(`   ‚Ä¢ Max Cycles:       ${this.config.maxTradeCycles}`);

    console.log("=========================================================\n");
  }
}
