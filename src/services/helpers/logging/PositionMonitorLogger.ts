import type {
  BinaryOptionsOption,
  Position,
} from "@quadcode-tech/client-sdk-js";
import type { TradingState } from "../../../models/TradingState";
import { getGlobalEnvConfig } from "../../../models/environment/GlobalEnvConfig";
import { createWorkerLogger } from "../../../utils/AppLogger";
import { getTradeWorkerEnvConfig } from "../../../models/environment/TradeWorkerEnvConfig";

export class PositionMonitorLogger {
  private readonly globalConfig = getGlobalEnvConfig();
  private readonly tradeConfig = getTradeWorkerEnvConfig();
  private readonly logger = createWorkerLogger({
    logFolderPath: process.env.LOG_FOLDER_PATH!,
    workerId: String(this.tradeConfig.INSTRUMENT),
  });

  constructor(private readonly tradingState: TradingState) {}

  logConnectionSuccess(order: BinaryOptionsOption): void {
    const currentTradeNumber = this.tradingState.getCurrentTradeNumber();
    const logMessage = `
üîÑ ================= Trade #${currentTradeNumber} Connection to the server is successful: Order Details ================
  ‚Ä¢ Order ID: ${order.id}
  ‚Ä¢ Active ID: ${order.activeId}
  ‚Ä¢ Amount: ${order.price}
  ‚Ä¢ Direction: ${order.direction?.toUpperCase()}
  ‚Ä¢ Open Time: ${order.openedAt?.toLocaleString()}
  ‚Ä¢ Open Price: ${order.openQuoteValue}
  ‚Ä¢ Expired At: ${new Date(order.expiredAt).toLocaleString()}
===============================================================================================================`;
    this.logger.info(logMessage);
  }

  logPositionUpdate(position: Position): void {
    const currentTradeNumber = this.tradingState.getCurrentTradeNumber();
    const logMessage = `
üìä ==================== Trade #${currentTradeNumber} Position Update ====================
üìà Position Details:
   ‚Ä¢ Order ID: ${position.externalId}
   ‚Ä¢ Asset Name: ${position.active?.name}
   ‚Ä¢ Amount: ${position.invest}
   ‚Ä¢ Open Time: ${position.openTime?.toLocaleString()}
   ‚Ä¢ Open Price: ${position.openQuote}
   ‚Ä¢ Min Profit: ${this.globalConfig.SELL_WHEN_PROFIT_ABOVE_PERCENTAGE}%
   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${
     (position.invest || 0) *
     (this.globalConfig.SELL_WHEN_PROFIT_ABOVE_PERCENTAGE / 100)
   }

üí∞ Profit/Loss:
   ‚Ä¢ PNL: ${position.pnl}
   ‚Ä¢ Net PNL: ${position.pnlNet}
   ‚Ä¢ Sell Profit: ${position.sellProfit}

‚ö° Status:
   ‚Ä¢ Direction: ${position.direction?.toUpperCase()}
   ‚Ä¢ Status: ${position.status}
   ‚Ä¢ Expiry: ${position?.expirationTime?.toLocaleString()}
=====================================================================\n`;

    this.logger.info(logMessage);
  }

  public logSellDecision(position: Position): void {
    const currentTradeNumber = this.tradingState.getCurrentTradeNumber();
    const logMessage = `
üéØ ==================== Trade #${currentTradeNumber} Sell Decision ====================

üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:
   ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${position.externalId}
   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ${position.active?.name}
   ‚Ä¢ Direction: ${position.direction?.toUpperCase()}
   ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠: ${position.invest}

üí∞ Profit Analysis:
   ‚Ä¢ PNL: ${position.pnl}
   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£(%): ${this.globalConfig.SELL_WHEN_PROFIT_ABOVE_PERCENTAGE}%
   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${
     (position.invest || 0) *
     (this.globalConfig.SELL_WHEN_PROFIT_ABOVE_PERCENTAGE / 100)
   }
   ‚Ä¢ Current Quote: ${position.closeQuote}

‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:
   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à: ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
   ‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î
=====================================================================\n`;

    this.logger.info(logMessage);
  }
}
