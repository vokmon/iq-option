import { ClientSdk, Position } from "@quadcode-tech/client-sdk-js";
import { TradingConfig } from "../models/TradingConfig";
import { TradingState } from "../models/TradingState";

export class PositionMonitor {
  constructor(
    private readonly clientSdk: ClientSdk,
    private readonly config: TradingConfig,
    private readonly tradingState: TradingState
  ) {}

  async monitorPosition(
    orderId: number,
    onPositionClosed: (position: Position) => void,
    expiryDate: Date
  ): Promise<void> {
    try {
      this.logStartMonitoring(orderId);
      let isMonitoring = true;

      const positions = await this.clientSdk.positions();
      return new Promise((resolve, reject) => {
        positions.subscribeOnUpdatePosition(async (position) => {
          if (!isMonitoring) return;

          if (position.externalId === orderId) {
            this.logPositionUpdate(position, expiryDate);

            if (this.shouldSellPosition(position)) {
              this.logSellDecision(position);
              await position.sell();
              try {
                onPositionClosed(position);
              } catch (error) {
                reject(error);
                return;
              }
              this.logPositionSold(orderId, position.pnl || 0);
              positions.unsubscribeOnUpdatePosition(() => {});
            }
            if (position.status === "closed") {
              try {
                onPositionClosed(position);
              } catch (error) {
                reject(error);
                return;
              }
              isMonitoring = false;
              positions.unsubscribeOnUpdatePosition(() => {});
              resolve();
            }
          }
        });
      });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° position:", error);
      throw error;
    }
  }

  private logStartMonitoring(orderId: number): void {
    console.log(
      `\nüîç ================== Position Monitoring Started ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ================== üîç`
    );
    console.log(`üìå Order ID: ${orderId}`);
    console.log("=========================================================\n");
  }

  private logPositionUpdate(position: Position, expiryDate: Date): void {
    console.log(
      `\nüìä ================== Position Update ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ================== üìä`
    );
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}`);

    // Investment Details
    console.log("\nüí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:");
    console.log(`   ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:        ${position.externalId}`);
    console.log(`   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå:         ${position.active?.name}`);
    console.log(`   ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠:      ${position.invest}`);
    console.log(`   ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î:          ${position.openQuote}`);
    console.log(
      `   ‚Ä¢ Min Profit:       ${this.config.minProfitThreshold * 100}%`
    );

    // Profit/Loss Information
    console.log("\nüìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:");
    console.log(`   ‚Ä¢ PNL:              ${position.pnl}`);
    console.log(`   ‚Ä¢ Net PNL:          ${position.pnlNet}`);
    console.log(`   ‚Ä¢ Sell Profit:      ${position.sellProfit}`);

    // Position Status
    console.log("\n‚ö° Position Status:");
    console.log(`   ‚Ä¢ Direction:        ${position.direction?.toUpperCase()}`);
    console.log(`   ‚Ä¢ Status:           ${position.status}`);
    console.log(`   ‚Ä¢ Expiry:           ${expiryDate.toLocaleString()}`);

    console.log("=========================================================\n");
  }

  private logPositionSold(orderId: number, pnl: number): void {
    console.log(
      `\nüü¢ ================== Position Sold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ================== üü¢`
    );
    console.log(`üìå ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orderId}`);
    console.log(`üí∞ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${pnl}`);
    console.log("=========================================================\n");
  }

  private shouldSellPosition(position: any): boolean {
    return !!(
      position.pnl &&
      position.pnl >
        position.invest + position.invest * this.config.minProfitThreshold
    );
  }

  private logSellDecision(position: Position): void {
    console.log(
      `\nüéØ ================== Sell Decision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${this.tradingState.getCurrentCycle()} ================== üéØ`
    );
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}`);

    // Position Details
    console.log("\nüìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠:");
    console.log(`   ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:         ${position.externalId}`);
    console.log(`   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå:      ${position.active?.name}`);
    console.log(`   ‚Ä¢ Direction:        ${position.direction?.toUpperCase()}`);
    console.log(`   ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠:    ${position.invest}`);

    // Profit Analysis
    console.log("\nüí∞ Profit Analysis:");
    console.log(`   ‚Ä¢ PNL:      ${position.pnl}`);
    console.log(
      `   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£(%):  ${this.config.minProfitThreshold * 100}%`
    );
    console.log(
      `   ‚Ä¢ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:    ${
        (position.invest || 0) +
        (position.invest || 0) * this.config.minProfitThreshold
      }`
    );
    console.log(`   ‚Ä¢ Current Quote:    ${position.closeQuote}`);

    // Decision
    console.log("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:");
    console.log(`   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:       ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå`);
    console.log(`   ‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:           ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î`);
    console.log("=========================================================\n");
  }
}
