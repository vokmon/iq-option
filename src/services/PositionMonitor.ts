import { ClientSdk } from "@quadcode-tech/client-sdk-js";
import { TradingConfig } from "../models/TradingConfig";

export class PositionMonitor {
  constructor(
    private readonly clientSdk: ClientSdk,
    private readonly config: TradingConfig
  ) {}

  async monitorPosition(
    orderId: number,
    onPositionClosed: (pnl: number) => void,
    expiryDate: Date
  ): Promise<void> {
    try {
      console.log(`üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° order ID: ${orderId}`);
      let isMonitoring = true;

      const positions = await this.clientSdk.positions();
      positions.subscribeOnUpdatePosition(async (position) => {
        if (!isMonitoring) return;

        if (position.externalId === orderId) {
          console.log("\n--------------------------------");
          console.log(`üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position: ${orderId}`);
          console.log(`üí∞ Invest: ${position.invest}`);
          console.log(`üí∞ Open Quote: ${position.openQuote}`);
          console.log(`üí∞ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (PNL): ${position.pnl}`);
          console.log(`üí∞ Pnl Net: ${position.pnlNet}`);
          console.log(
            `üí∞ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Sell Profit): ${position.sellProfit}`
          );
          console.log(`üí∞ Expected Profit: ${position.expectedProfit}`);
          console.log(
            `üí∞ ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£: ${this.config.minProfitThreshold * 100}%`
          );
          console.log(`üí∞ Direction: ${position.direction}`);
          console.log(`‚è±Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${position.status}`);
          console.log(`‚è±Ô∏è ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${expiryDate.toLocaleString()}`);
          console.log("--------------------------------");

          if (
            position.expectedProfit &&
            position.invest &&
            position.pnl &&
            position.pnl >
              position.invest + position.invest * this.config.minProfitThreshold
          ) {
            await position.sell();
            onPositionClosed(position.pnl || 0);
            console.log("\n--------------------------------");
            console.log(`üü¢ ‡∏Ç‡∏≤‡∏¢ Position ${orderId}`);
            console.log(`üí∞ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${position.pnl}`);
            console.log("--------------------------------");
          }
          if (position.status === "closed") {
            console.log("üîÑ Position ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß");
            onPositionClosed(position.pnl || 0);
            isMonitoring = false;
          }
        }
      });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° position:", error);
    }
  }
}
